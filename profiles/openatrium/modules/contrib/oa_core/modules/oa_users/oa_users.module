<?php
/**
 * @file
 * Code for the Open Atrium Users feature.
 */

include_once 'oa_users.features.inc';

/**
 * Implements hook_menu().
 */
function oa_users_menu() {
  $items['user/%user/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_users_settings_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function oa_users_menu_alter(&$items) {
  // @TODO change dashboard to use not-panelizer-of-user-view and switch
  // switch activity to use user_view panel.
  $items['user/%user/view'] = $items['user/%user'];
  $items['user/%user/view']['access callback'] = 'oa_users_user_is_current_user';
  $items['user/%user/view']['type'] = MENU_LOCAL_TASK;
  $items['user/%user/view']['title'] = 'Dashboard';
  $items['user/%user/view']['weight'] = $items['user/%pm_arg/activity']['weight'] - 1;
  unset($items['user/%user/view']['title callback'], $items['user/%user/view']['title arguments']);

  $items['user/%user'] = $items['user/%pm_arg/activity'];
  $items['user/%user']['type'] = MENU_NORMAL_ITEM;
  $items['user/%pm_arg/activity']['type'] = MENU_DEFAULT_LOCAL_TASK;
}

function oa_users_user_is_current_user($account) {
  global $user;
  return $account->uid == $user->uid;
}

/**
 * Page callback for user/%user/settings. Provide a settings form, and hooks
 * for modules to add their own settings.
 */
function oa_users_settings_form($form, &$form_state, $user) {
  $form['#submit'][] = 'oa_users_settings_form_submit';

  drupal_alter('oa_user_settings_form', $form, $form_state, $user);

  return system_settings_form($form);
}

/**
 * Form submit callback for user/%user/settings. Provides a hook for modules
 * that added fields to the form to add them to the user's data column.
 */
function oa_users_settings_form_submit($form, &$form_state) {
  $user = $form_state['build_info']['args'][0];
  $settings['data'] = module_invoke_all('oa_user_settings_form_submit', $form_state, $user);

  user_save($user, $settings);
}

/**
 * Provide information for rendering a user.
 */
function oa_users_build_user_details($user, $image_style = 'oa_small_thumbnail') {
  $details = array();
  $details['user'] = $user;
  $details['realname'] = empty($user->realname) ? $user->name : $user->realname;
  $details['name'] = $user->name;
  $details['picture'] = oa_users_picture($user, $image_style);
  //Build out links
  $details['links']['dashboard'] = 'user/' . $user->uid . '/view';
  $details['links']['edit_profile'] = 'user/' . $user->uid . '/edit';
  $details['links']['logout'] = 'user/logout';
  return $details;
}

/**
 * Return a user's profile image
 */
function oa_users_picture($user = NULL, $image_style = 'oa_small_thumbnail') {
  if (isset($user) && !empty($user->field_user_picture)) {
    $picture = $user->field_user_picture[LANGUAGE_NONE][0];
    $image = array(
      'style_name' => $image_style,
      'path' => $picture['uri'],
      'width' => $picture['width'],
      'height' => $picture['height'],
      'alt' => t('Your profile picture'),
    );
    return theme('image_style', $image);
  }
  else {
    $image = array(
      'style_name' => $image_style,
      'path' => drupal_get_path('module', 'oa_users') . '/oa-user.png',
      'width' => 30,
      'height' => 30,
      'alt' => t('Your profile picture'),
    );
    // image styles only supported for images in /files dir
    // so for now, ignore the image style
    return theme('image', $image);
  }
}

/**
 * Implements hook_features_export_alter().
 */
function oa_users_features_export_alter(&$export, $module_name) {
  // Trash flag should be recommanded, not a depedency.
  if (!empty($export['dependencies']) && in_array('trash_flag', $export['dependencies'])) {
    $export['features_exclude']['dependencies']['trash_flag'] = 'trash_flag';
    unset($export['dependencies'][array_search('trash_flag', $export['dependencies'])]);
  }
}

/**
 * Implements hook_node_access().
 *
 * Deny delete access when trash flag is in use.
 */
function og_users_node_access($node, $op, $account) {
  if ($op == 'delete' && module_exists('trash_flag')) {
    return NODE_ACCESS_DENY;
  }
}
